---
- name: Install "mysql-server"
  apt:
    name: mysql-server
    state: latest
    update_cache: no

- name: Copy file "override.cnf.j2" to remote host "/etc/mysql/mysql.conf.d/override.cnf"
  template:
    src: override.cnf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
    mode: 0644
  notify: Restart mysql

#MySQL start and enabled moved to bottom
#- name: Set "mysql" state "started" and enabled "yes"
#  service:
#    name: mysql
#    state: started
#    enabled: yes  

- name: Install "python3-pymysql" a mysql depencancy
  apt:
    name: python3-pymysql
    state: latest
    update_cache: no

- name: MySQL database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: MySQL user
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica


#MySql exporter stuff follows bwlow. + MySQL's enabed and started at end.
- name: Template ".my.cnf" file "my.cnf.j2" to remote host "/var/lib/prometheus/.my.cnf"
  template:
    src: my.cnf.j2
    dest: /var/lib/prometheus/.my.cnf # It's .my.cnf not just my.cnf
    owner: prometheus
    group: prometheus
    mode: 0644
  no_log: yes #ONLY_FOR_THINGS_WITH_SECRETS_IN_TEMPLATE
  notify:
    - Restart mysql
    - Restart prometheus-mysqld-exporter

- name: Install "prometheus-mysqld-exporter"
  apt:
    name: prometheus-mysqld-exporter
    state: latest
    update_cache: no

- name: Make "DIRECTORY" at "/var/lib/prometheus" 
  file:
    path: /var/lib/prometheus
    state: directory

- name: Template "prometheus-mysqld-exporter" file "-" to remote host "/etc/default/prometheus-mysqld-exporter"
  template:
    src: prometheus-mysqld-exporter.j2
    dest: /etc/default/prometheus-mysqld-exporter
#    owner: OPTIONAL_UESR
#    group: OPTIONAL_GROUP
#    mode: OPTIONAL
#  no_log: ONLY_FOR_THINGS_WITH_SECRETS_IN_TEMPLATE
  notify: Restart prometheus-mysqld-exporter

- name: Create MySQL_exporter_user
  community.mysql.mysql_user:
    name: "{{ MySQL_exporter_user }}"
    password: "{{ MySQL_exporter_user_password }}"
    priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
    resource_limits:
      MAX_USER_CONNECTIONS: 3
    state: present
    login_unix_socket: /var/run/mysqld/mysqld.sock


#Before we set as service we need to restart prometheus-mysqld-exporter so it picks up is config file first. Otherwise it
#isn't possible to make it a service "failed reading ini file: open /var/lib/prometheus/.my.cnf: no such file or directory"
- name: Flush Handlers to run them now so "prometheus-mysqld-exporter" can become a servie.
  meta: flush_handlers

- name: Set "prometheus-mysqld-exporter" state "started" and enabled "yes"
  service:
    name: prometheus-mysqld-exporter
    state: started
    enabled: yes  


#Backup things
#First to make the dir that the backups go to in the BACKUP_USER /home
- name: Make "/home/backup/mysql" at "/home/backup/mysql" 
  file:
    path: /home/backup/mysql
    state: directory
    mode: 0747
    owner: "{{ backup_user }}"
    group: mysql

#create a user for BACKUP_USER on mysql
- name: Create user for BACKUP_USER on mysql
  mysql_user:
    name: "{{ backup_user }}"
    password: "{{ mysql_backup_user_pass }}"
    priv: "{{ mysql_database }}.*:SELECT,LOCK TABLES"
    host: "localhost"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: yes

- name: Template "backup.my.cnf" file "backup.my.cnf.j2" to remote host "/home/backup/.my.cnf"
  template:
    src:  backup.my.cnf.j2
    dest: /home/backup/.my.cnf
    owner: backup
    group: backup
    mode: 0660
  no_log: yes # ONLY_FOR_THINGS_WITH_SECRETS_IN_TEMPLATE
 # notify: HANDLER

# Cronjob tasks here
- name: Add cron jobs
  ansible.builtin.cron:
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    minute: "{{ item.minute }}"
    hour: "{{ item.hour }}"
    weekday: "{{ item.weekday }}"
    user: "{{ backup_user }}"
    state: "{{ 'present' if inventory_hostname == mysql_backup_host else 'absent' }}"
  loop: "{{ cron_jobs }}"

- debug:
    var: inventory_hostname

- debug:
    var: mysql_backup_host


# LAB-11 TASK 1 for replication metric exporoting.
#Mysql HA setup thing for LAB11 go here
#This is to add a config to the exporter so that it exports replication metrics.





# LAB-11 Task 3
- name: Create "MySQL" replication user
  mysql_user:
    name: replication
    password: "{{ replication_user_pass }}"
    priv: "*.*:REPLICATION SLAVE"
    host: "%"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

# LAB-11 Task 6 replication

- name: Make replication read only
  mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica

#MySQL start and enabled now here.
- name: Set "mysql" state "started" and enabled "yes"
  service:
    name: mysql
    state: started
    enabled: yes  

- name: Set CNAME records
  delegate_to: ErickHunter-3
  nsupdate:
    key_algorithm: "hmac-sha256"
    key_name: "nsupdate"
    key_secret: "{{ dns_update_key }}"
    server: "localhost"
    zone: "{{ my_domain }}"
    record: "{{ item.key }}"
    type: "CNAME"
    value: "{{ item.value }}"
  loop: "{{ dns_cname_records | dict2items | selectattr('key', 'in', ['mysql-1', 'mysql-2']) }}"
  no_log: yes
